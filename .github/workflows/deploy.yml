name: Deploy to AWS EC2

on:
  push:
    branches: [main] # Trigger deployment on push to main branch

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set npm registry to public
        run: npm config set registry https://registry.npmjs.org/

      - name: Clear npm cache and remove .npmrc
        run: |
          rm -f ~/.npmrc
          npm cache clean --force

      - name: Debug npm config
        run: npm config list

      - name: Install dependencies and build
        working-directory: ./frontend
        run: |
          npm install
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # or your region

      - name: Deploy to S3
        run: |
          aws s3 sync ./frontend/dist s3://YOUR_BUCKET_NAME --delete

  deploy:
    runs-on: ubuntu-latest # Use Ubuntu runner for the job
    timeout-minutes: 15 # Set a timeout for the job

    # Add environment for better secrets management
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for proper git operations

      # Add error handling for AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS access key
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS secret
          aws-region: eu-north-1 # AWS region
        id: aws-credentials

      # Add pre-deployment checks
      - name: Check AWS Connection
        run: |
          aws sts get-caller-identity  # Verify AWS credentials
          aws ec2 describe-instances --instance-ids i-0d604cfeb07f96aec  # Check instance

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }} # EC2 public DNS or IP
          username: ec2-user # Default EC2 username
          key: ${{ secrets.EC2_SSH_KEY }} # SSH private key
          script: |
            set -ex  # Exit on error and print commands

            # Remove conflicting curl packages
            sudo yum remove -y curl curl-minimal || true

            # Clean yum cache
            sudo yum clean all
            sudo rm -rf /var/cache/yum

            # Install required packages with --allowerasing flag
            sudo yum update -y
            sudo yum install -y --allowerasing git docker firewalld curl wget

            # Install Docker Compose
            echo "Installing Docker Compose..."
            DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
            sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            # Start and enable Docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER

            # Configure Git credentials for private repo access
            git config --global credential.helper store
            echo "https://${{ secrets.GH_TOKEN }}@github.com" > ~/.git-credentials

            # Setup application directory
            APP_DIR=~/RTK-Query
            echo "Deploying to $APP_DIR"

            # Remove existing directory if corrupted
            if [ -d "$APP_DIR" ] && [ ! -d "$APP_DIR/.git" ]; then
              echo "Removing invalid repository..."
              rm -rf "$APP_DIR"
            fi

            # Clone or update repository
            if [ ! -d "$APP_DIR" ]; then
              echo "Cloning fresh repository..."
              git clone https://${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git "$APP_DIR"
            else
              echo "Updating existing repository..."
              cd "$APP_DIR"
              git fetch origin
              git reset --hard origin/main
            fi

            # Verify repository and files
            cd "$APP_DIR"
            ls -la

            if [ ! -f "docker-compose.yml" ]; then
              echo "Error: docker-compose.yml not found!"
              exit 1
            fi

            # Stop any running services and clear ports
            echo "Cleaning up existing services..."
            sudo systemctl stop nginx || true  # Stop system nginx if running
            sudo lsof -ti:80 | xargs -r sudo kill -9 || true  # Force kill anything on port 80
            docker-compose down --remove-orphans || true  # Stop existing containers

            # Verify port availability
            if sudo lsof -i :80; then
              echo "Error: Port 80 is still in use"
              exit 1
            fi

            # Verify network configuration
            echo "Checking network configuration..."
            sudo netstat -tulpn
            curl -v localhost:80 || true

            # Deploy with enhanced logging
            cd "$APP_DIR"
            echo "Starting deployment from $(pwd)"
            docker-compose config  # Validate docker-compose config
            docker-compose pull    # Pull latest images
            docker-compose up --build -d  # Build and start containers

            # Enhanced verification
            echo "Deployment verification:"
            docker-compose ps
            docker ps -a
            docker network ls
            docker-compose logs

            # Test external access
            echo "Testing external access:"
            curl -v http://localhost:80

            # Add Docker login if using private images
            echo "Logging into Docker..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin || true

            # Add health check
            echo "Checking application health..."
            MAX_RETRIES=5
            COUNT=0
            while [ $COUNT -lt $MAX_RETRIES ]; do
              if curl -f http://localhost:80; then
                echo "Application is healthy"
                exit 0
              fi
              COUNT=$((COUNT+1))
              sleep 10
            done
            echo "Health check failed after $MAX_RETRIES attempts"
            exit 1
