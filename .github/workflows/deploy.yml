name: Deploy to AWS EC2

on:
  push:
    branches: [main] # Trigger deployment on push to main branch

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Set npm registry to public
        run: npm config set registry https://registry.npmjs.org/

      - name: Clear npm cache and remove .npmrc
        run: |
          rm -f ~/.npmrc
          npm cache clean --force

      - name: Debug npm config
        run: npm config list

      - name: Install dependencies and build
        working-directory: ./frontend
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
        run: |
          npm install
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1 # or your region

      - name: Deploy to S3
        run: |
          aws s3 sync ./frontend/dist s3://todo-app2025-frontend --delete
      - name: log s3 bucket  Website endpoint URL
        run: |
          echo "( CloudFront URL with domain name ) S3 Website endpoint URL: https://secret-domain.net/"
          aws s3 ls s3://todo-app2025-frontend

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id E1XA1M1DY5S53X --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-north-1

  deploy-backend:
    runs-on: ubuntu-latest # Use Ubuntu runner for the job
    timeout-minutes: 15 # Set a timeout for the job

    # Add environment for better secrets management
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for proper git operations

      # Add error handling for AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS access key
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS secret
          aws-region: eu-north-1 # AWS region
        id: aws-credentials

      # Add pre-deployment checks
      - name: Check AWS Connection
        run: |
          aws sts get-caller-identity  # Verify AWS credentials
          aws ec2 describe-instances --instance-ids i-0d604cfeb07f96aec  # Check instance

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }} # EC2 public DNS or IP
          username: ec2-user # Default EC2 username
          key: ${{ secrets.EC2_SSH_KEY }} # SSH private key
          script: |
            set -exuo pipefail  # Exit on error and print commands
            trap 'echo "==== ERROR: Showing last 100 lines of backend logs ===="; docker-compose logs --tail=100 backend || true; echo "==== ERROR: Showing docker ps ===="; docker ps -a; exit 1' ERR
            echo "==== Removing conflicting curl packages ===="
            sudo yum remove -y curl curl-minimal || true

            echo "==== Cleaning yum cache ===="
            sudo yum clean all
            sudo rm -rf /var/cache/yum

            echo "==== Installing required packages ===="
            sudo yum update -y
            sudo yum install -y --allowerasing git docker firewalld curl wget

            echo "==== Freeing disk space ===="
            docker system prune -af || true
            docker volume prune -f || true
            sudo rm -rf /var/lib/docker/tmp/*
            sudo rm -rf /var/cache/yum

            echo "==== Installing Docker Compose ===="
            DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
            sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            echo "==== Starting and enabling Docker ===="
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER

            echo "==== Configuring Git credentials for private repo access ===="
            git config --global credential.helper store
            echo "https://${{ secrets.GH_TOKEN }}@github.com" > ~/.git-credentials

            APP_DIR=~/RTK-Query
            echo "==== Deploying to $APP_DIR ===="

            if [ -d "$APP_DIR" ] && [ ! -d "$APP_DIR/.git" ]; then
              echo "==== Removing invalid repository... ===="
              rm -rf "$APP_DIR"
            fi

            echo "==== Fixing permissions for RTK-Query directory ===="
            sudo chown -R ec2-user:ec2-user /home/ec2-user/RTK-Query
            sudo chmod -R u+w /home/ec2-user/RTK-Query

            if [ ! -d "$APP_DIR" ]; then
              echo "==== Cloning fresh repository... ===="
              git clone https://${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git "$APP_DIR"
            else
              echo "==== Updating existing repository... ===="
              cd "$APP_DIR"
              git fetch origin
              git reset --hard origin/main
            fi

            echo "==== Listing backend directory contents ===="
            ls -la

            if [ ! -f "docker-compose.yml" ]; then
              echo "==== Error: docker-compose.yml not found! ===="
              exit 1
            fi

            echo "==== Cleaning up existing services... ===="
            sudo systemctl stop nginx || true
            sudo systemctl disable nginx || true
            sudo lsof -ti:80 | xargs -r sudo kill -9 || true
            docker-compose down --remove-orphans || true

            echo "==== Verifying port 80 availability ===="
            if sudo lsof -i :80; then
              echo "==== Error: Port 80 is still in use ===="
              exit 1
            fi

            echo "==== Checking network configuration ===="
            sudo netstat -tulpn
            curl -v localhost:80 || true

            echo "==== Setting up environment variables ===="
            echo "${{ secrets.BACKEND_ENV }}" > backend/.env

            echo "==== Starting deployment from $(pwd) ===="
            docker-compose config
            echo "==== Pulling latest images ===="
            docker-compose pull
            echo "==== Building and starting containers ===="
            docker-compose up --build

            echo "==== Deployment verification: docker-compose ps ===="
            docker-compose ps
            echo "==== Deployment verification: docker ps -a ===="
            docker ps -a
            echo "==== Deployment verification: docker network ls ===="
            docker network ls
            echo "==== Deployment verification: docker-compose logs ===="
            docker-compose logs --tail=50

            echo "==== Testing external access (curl http://localhost:80) ===="
            curl -v http://localhost:80

            echo "==== Logging into Docker (if using private images) ===="
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin || true

            echo "==== Starting health check loop ===="
            MAX_RETRIES=5
            COUNT=0
            while [ $COUNT -lt $MAX_RETRIES ]; do
              echo "==== Health check attempt $((COUNT+1)) of $MAX_RETRIES ===="
              if curl -v http://localhost:80; then
                echo "==== Application is healthy ===="
                exit 0
              fi
              COUNT=$((COUNT+1))
              sleep 10
            done
            echo "==== Health check failed after $MAX_RETRIES attempts ===="
            exit 1

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id E1XA1M1DY5S53X --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-north-1
