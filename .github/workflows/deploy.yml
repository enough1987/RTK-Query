name: Deploy to AWS EC2

on:
  push:
    branches: [main] # Trigger deployment on push to main branch

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Set npm registry to public
        run: npm config set registry https://registry.npmjs.org/

      - name: Clear npm cache and remove .npmrc
        run: |
          rm -f ~/.npmrc
          npm cache clean --force

      - name: Debug npm config
        run: npm config list

      - name: Install dependencies and build
        working-directory: ./frontend
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
        run: |
          npm install
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} # or your region

      - name: Deploy to S3
        run: |
          aws s3 sync ./frontend/dist s3://todo-app2025-frontend --delete
      - name: log s3 bucket  Website endpoint URL
        run: |
          echo "( CloudFront URL with domain name ) S3 Website endpoint URL: https://secret-domain.net/"
          aws s3 ls s3://todo-app2025-frontend

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id E1XA1M1DY5S53X --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

  deploy-backend:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest ./backend

      - name: Tag Docker image
        run: |
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 30m
          script: |
            set -exuo pipefail
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker

            # Login to ECR
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

            cd ~/RTK-Query

            # Set up environment variables
            echo "${{ secrets.BACKEND_ENV }}" > backend/.env

            # Pull latest image and start containers
            docker-compose pull
            docker-compose up -d

            # Health check
            curl -v http://localhost:80 || true

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id E1XA1M1DY5S53X --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
