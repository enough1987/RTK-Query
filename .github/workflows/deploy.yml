name: Deploy Fullstack App to AWS (CloudFormation, EC2, ECR, S3, CloudFront)

on:
  push:
    branches: [main]

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Clean up failed CloudFormation stack
        run: |
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name secret-domain-net-stack --region ${{ secrets.AWS_REGION }} --query "Stacks[0].StackStatus" --output text || echo "NOT_FOUND")
          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Deleting failed stack secret-domain-net-stack..."
            aws cloudformation delete-stack --stack-name secret-domain-net-stack --region ${{ secrets.AWS_REGION }}
            # Wait for deletion to complete
            aws cloudformation wait stack-delete-complete --stack-name secret-domain-net-stack --region ${{ secrets.AWS_REGION }}
          else
            echo "No failed stack to delete."
          fi

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file infrastructure.yml \
            --stack-name secret-domain-net-stack \
            --capabilities CAPABILITY_NAMED_IAM \
            --region eu-north-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
      - name: Delete failed CloudFormation stack
        if: failure() # Only runs if previous step fails
        run: |
          echo "Deleting failed stack secret-domain-net-stack..."
          aws cloudformation delete-stack --stack-name secret-domain-net-stack --region eu-north-1
          aws cloudformation wait stack-delete-complete --stack-name secret-domain-net-stack --region eu-north-1
  build-backend:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.run_number }} ./backend

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.run_number }}

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [build-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Write SSH key to file
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ec2_key.pem
          chmod 600 /tmp/ec2_key.pem

      - name: Copy docker-compose.yml and nginx.conf to EC2
        run: |
          scp -i /tmp/ec2_key.pem -o StrictHostKeyChecking=no backend/docker-compose.yml backend/nginx.conf ec2-user@${{ secrets.EC2_HOST }}:~/
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 30m
          envs: GITHUB_RUN_NUMBER
          script: |
            set -exuo pipefail
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker

            # Login to ECR
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

            cd ~/

            # Set up environment variables
            echo "${{ secrets.BACKEND_ENV }}" > .env

            # Clean up unused Docker resources
            docker system prune -af

            # Pull latest image and start containers
            docker-compose pull
            docker-compose up -d

            # Health check
            curl -v http://localhost:80 || true

  build-frontend:
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies and build
        working-directory: ./frontend
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
        run: |
          npm install
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: |
          aws s3 sync ./frontend/dist s3://secret-domain-net-frontend --delete

      - name: Log S3 bucket Website endpoint URL
        run: |
          echo "( CloudFront URL with domain name ) S3 Website endpoint URL: https://secret-domain.net/"
          aws s3 ls s3://secret-domain-net-frontend

  invalidate-cloudfront:
    runs-on: ubuntu-latest
    needs: [build-frontend]
    steps:
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id E1XA1M1DY5S53X --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
