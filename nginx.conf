user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Enhanced logging format with JSON escape
    log_format detailed escape=json '{'
        '"timestamp":"$time_iso8601",'
        '"client":"$remote_addr",'
        '"method":"$request_method",'
        '"uri":"$request_uri",'
        '"status":$status,'
        '"referrer":"$http_referer",'
        '"user_agent":"$http_user_agent",'
        '"forwarded_for":"$http_x_forwarded_for",'
        '"request_time":$request_time,'
        '"response_size":$body_bytes_sent,'
        '"upstream_time":"$upstream_response_time",'
        '"upstream_host":"$upstream_addr"'
    '}';

    # Set buffer and flush parameters
    access_log /var/log/nginx/frontend-access.log detailed buffer=32k flush=5s;
    error_log /var/log/nginx/error.log debug;

    sendfile on;
    keepalive_timeout 65;

    server {
        listen 80;
        server_name localhost;

        # API requests (place this BEFORE the frontend location)
        location /api/ {
            proxy_pass http://backend:3001/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Force JSON content type
            proxy_set_header Accept "application/json";
            proxy_set_header Content-Type "application/json";
            add_header Content-Type "application/json" always;

            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;

            # Better error handling
            proxy_intercept_errors on;
            error_page 502 = @backend_down;
            
            # Debug headers
            add_header X-Debug-Path $request_uri always;
            add_header X-Debug-Host $proxy_host always;

            # Prevent fallback to index.html
            try_files "" @backend_down;
        }

        # Frontend requests (place this AFTER the API location)
        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
            access_log /var/log/nginx/frontend-access.log detailed;
        }

        # Backend error handler
        location @backend_down {
            default_type application/json;
            return 502 '{"error": "Backend service unavailable"}';
        }
    }
}