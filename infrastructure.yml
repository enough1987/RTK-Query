AWSTemplateFormatVersion: "2010-09-09"
Description: Fullstack App Infrastructure

Resources:
  # S3 bucket for static frontend hosting
  SecretDomainNetBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: secret-domain-net-frontend

  # EC2 instance for backend deployment
  SecretDomainNetEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: ami-09278528675a8d54e
      KeyName: ec2Key
      SecurityGroupIds:
        - !Ref SecretDomainNetSecurityGroup

  # ECR repository for backend Docker images
  SecretDomainNetECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: secret-domain-net-backend

  # RDS PostgreSQL instance for backend database
  SecretDomainNetRDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: secret-domain-net-postgres
      AllocatedStorage: 20 # GB
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: 17.5 # <-- Use the exact version from the AWS Console
      MasterUsername: masteruser # <-- Change for production
      MasterUserPassword: masterpassword # <-- Use Secrets Manager for production!
      VPCSecurityGroups:
        - !GetAtt SecretDomainNetRDSSecurityGroup.GroupId
      PubliclyAccessible: true
      BackupRetentionPeriod: 7
      StorageType: gp2
      MultiAZ: false
      DBSubnetGroupName: !Ref SecretDomainNetRDSSubnetGroup

  # Security group for EC2 instance (allows SSH and HTTPS)
  SecretDomainNetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTPS for users, HTTP for AWS services, and SSH for admins
      SecurityGroupIngress:
        # SSH access (restrict in production!)
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        # HTTPS for public users
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        # HTTP for AWS services (replace with your VPC CIDR or load balancer SG)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/16 # Example: allow HTTP only from your VPC (replace with your actual VPC CIDR)

  # Security group for RDS instance (allow EC2 access)
  SecretDomainNetRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow EC2 access to RDS
      VpcId: vpc-020dfd6450e917a50 # <-- Use your actual VPC ID
      SecurityGroupIngress:
        # Allow EC2 access
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt SecretDomainNetSecurityGroup.GroupId
        # Allow access from your local computer
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 130.185.237.31/32 # <-- Replace with your actual public IP

  # CloudFront distribution for CDN and custom domain
  SecretDomainNetCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - DomainName: !GetAtt SecretDomainNetBucket.DomainName
            Id: S3Origin
            S3OriginConfig: {}
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: true # <-- Use ACM certificate for custom domain and HTTPS

  # ACM certificate for custom domain (must be validated manually in AWS Console)
  SecretDomainNetCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: secret-domain.net
      ValidationMethod: DNS

  # Internet Gateway for VPC
  SecretDomainNetInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  # Attach Internet Gateway to VPC
  SecretDomainNetVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: vpc-020dfd6450e917a50 # <-- Use your actual VPC ID
      InternetGatewayId: !Ref SecretDomainNetInternetGateway

  # Public subnet for the application
  SecretDomainNetPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: vpc-020dfd6450e917a50
      CidrBlock: 172.31.49.0/24 # <-- Pick an unused CIDR
      AvailabilityZone: eu-north-1a

  SecretDomainNetPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: vpc-020dfd6450e917a50
      CidrBlock: 172.31.48.0/24 # <-- Your existing unused CIDR
      AvailabilityZone: eu-north-1b

  # Public route table for the subnet
  SecretDomainNetPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: vpc-020dfd6450e917a50

  # Route to allow internet access from the subnet
  SecretDomainNetPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref SecretDomainNetPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SecretDomainNetInternetGateway

  # Associate the public subnet with the public route table
  SecretDomainNetSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SecretDomainNetPublicSubnet
      RouteTableId: !Ref SecretDomainNetPublicRouteTable

  # RDS subnet group for the database
  SecretDomainNetRDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Public subnet group for RDS
      SubnetIds:
        - !Ref SecretDomainNetPublicSubnetA
        - !Ref SecretDomainNetPublicSubnetB

Outputs:
  S3BucketName:
    Value: !Ref SecretDomainNetBucket
    Description: S3 bucket for frontend

  EC2InstanceId:
    Value: !Ref SecretDomainNetEC2Instance
    Description: EC2 instance for backend

  ECRRepositoryName:
    Value: !Ref SecretDomainNetECR
    Description: ECR repository for backend Docker images

  CloudFrontDistributionId:
    Value: !Ref SecretDomainNetCloudFront
    Description: CloudFront distribution for frontend

  RDSInstanceEndpoint:
    Value: !GetAtt SecretDomainNetRDS.Endpoint.Address
    Description: RDS PostgreSQL endpoint
# Example GitHub Actions deploy step (not part of CloudFormation template)
# - name: Deploy CloudFormation stack
#   run: |
#     aws cloudformation deploy \
#       --template-file infrastructure.yml \
#       --stack-name secret-domain-net-stack \
#       --capabilities CAPABILITY_NAMED_IAM
#   env:
#     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#     AWS_REGION: ${{ secrets.AWS_REGION }}
